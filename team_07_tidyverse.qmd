---
title: "Team 7 - EPL Football Results (Tidyverse)"
format: html
author: Firdauz B K, Jit Lin, Jonathan, Xiang Hong
editor: visual
toc: true
toc-depth: 2
embed-resources: true
references:
  - title: "Car Specification Dataset 1945-2020"
    url: https://www.kaggle.com/datasets/jahaidulislam/car-specification-dataset-1945-2020
    author: "Jahaidul Islam"
    year: 2023
    description: "This dataset provides detailed specifications of car models ranging from 1945 to 2020, including engine capacity and price, suitable for analytical purposes in automotive industry studies."
---

## Load Libraries

```{r}
library(gt)
library(tidyverse)
library(readr)
```

## Import Dataset

```{r}
team <- read_csv("dataset/epl_teams.csv")
results <- read_csv("dataset/epl_results.csv")
```

# Task 1: Converting EPL Football Results into a League Table

## 1.1 Generate a League Table from the EPL Results

...

## 1.2 Improve Visualization Using `gt` Functions

### Rationale:

#### Data Transformation:

Pivoting Data: The data is pivoted from wide to long format using pivot_longer, making it easier to calculate statistics for home and away teams. This transformation simplifies the processing and makes the data structure more manageable for calculations.

Separating Scores: The scores are separated into home and away goals using separate, allowing for individual goal calculations. This step is crucial for accurately determining match outcomes and calculating points.

#### Calculating Points and Statistics:

Case When: case_when is used to assign points based on match results. This method is clear and concise, handling multiple conditions efficiently and ensuring that points are correctly allocated for wins, draws, and losses.

Summarizing Statistics: Grouping by team and summarizing statistics helps in calculating the total points, goals for, goals against, and goal difference. This aggregation provides a comprehensive view of each team's performance throughout the season.

#### Visualization:

gt Package: The gt package is chosen for its ability to create professional-looking tables with extensive customization options. It offers flexibility in formatting and styling, making it ideal for presenting league tables.

Bold Title and Borders: Adding a bold title using md and borders using cell_borders makes the table visually appealing and easy to read. Borders enhance the table's structure, while the bold title draws attention to the main heading.

Color Scales: Using data_color to apply color scales to points, goal differences, and goals scored highlights important data points. This visual enhancement helps readers quickly identify key statistics and differences between teams.
...

# Task 2: Finding and Visualizing a Real-World Dataset

## Import the dataset

The dataset contains a list of cars manufactured from 1945 to 2020. It includes details such as make, model, year, engine size, fuel type, transmission type, drivetrain, body style, number of doors, etc. The data is from [Kaggle](https://www.kaggle.com/datasets/jahaidulislam/car-specification-dataset-1945-2020) by Jahaidul Islam.
```{r}
cdf <- read_csv("dataset/car_data.csv")
tail(cdf)
nrow(cdf)
```
...

# Task 3: Visualizing Michelson’s Speed-of-Light Measurements

```{r}
data(morley)
morley <- as_tibble(morley)
morley
```

## 3.1 Convert 'Expt' Column to Factoe

```{r}
morley <- morley %>%
  mutate(Expt = as.factor(Expt))
```

## 3.2 Plot 1 – Create a Scatter Plot displaying Experiment Number vs. Measured Speeds

```{r}
morley %>%
  ggplot(aes(x = Expt, y = Speed)) +
  geom_point() +
  labs(title = "Scatter Plot of Measured Speeds vs Experiment Number",
       x = "Experiment Number",
       y = "Measured Speeds",
       caption = "Source: R data set `morley`")

```

## Plot 2 – Create a Box Plot Measured Speeds with One Box Experiment

```{r}
morley %>%
  ggplot(aes(x = Expt, y = Speed)) +
  geom_boxplot() +
  labs(title = "Box Plot of Measured Speeds with One Box Experiment",
       x = "Experiment Number",
       y = "Measured Speeds",
       caption = "Source: R data set `morley`")

```

## Plot 3 – Add a Violin Plot in Plot 2

```{r}
morley %>%
  ggplot(aes(x = Expt, y = Speed)) +
  geom_boxplot() +
  geom_violin(alpha = 0.5) +
  labs(title = "Violin Plot of Measured Speeds with One Box Experiment",
       x = "Experiment Number",
       y = "Measured Speeds",
       caption = "Source: R data set `morley`")

```

## Plot 4 – Create a Faceted Plot Containing 5 Histograms

```{r}

morley %>%
  ggplot(aes(x = Speed)) +
  geom_histogram(binwidth=20, color = "black") +
  facet_wrap(~Expt) +
  labs(title = "Faceted Plot of Measured Speeds",
       x = "Measured Speeds",
       y = "Frequency",
       caption = "Source: R data set `morley`") +
  theme(strip.text.y = element_text(margin = margin(t = 0.5, unit = "cm")),
        strip.placement = "outside")

```

## Discuss Your Choice Among the 4 Visualization Plots

I would choose the violin plot among the 4 plots as it provides a scale of the amount of data distributed in a box plot, along with the usual information provided in a box plot, as the violin plot is a combination of a box plot and a density plot, which provides a better understanding of the data distribution.

