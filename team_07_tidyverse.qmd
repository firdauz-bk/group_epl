---
title: "Team 7 - EPL Football Results (Tidyverse)"
format: html
author: Firdauz B K, Jit Lin, Jonathan, Xiang Hong
editor: visual
toc: true
toc-depth: 2
embed-resources: true
references:
  - title: "Car Specification Dataset 1945-2020"
    url: https://www.kaggle.com/datasets/jahaidulislam/car-specification-dataset-1945-2020
    author: "Jahaidul Islam"
    year: 2023
    description: "This dataset provides detailed specifications of car models ranging from 1945 to 2020, including engine capacity and price, suitable for analytical purposes in automotive industry studies."
---

## Load Libraries

```{r}
library(gt)
library(tidyverse)
library(readr)
```

## Import Dataset

```{r}
team <- read_csv("dataset/epl_teams.csv")
results <- read_csv("dataset/epl_results.csv")
```

# Task 1: Converting EPL Football Results into a League Table

## 1.1 Generate a League Table from the EPL Results

### Processing the results data

```{r}
standings <- results %>%
  pivot_longer(-home_team, names_to = "away_team", values_to = "score") %>%
  filter(home_team != away_team) %>%  # Remove diagonal entries
  separate(score, into = c("home_goals", "away_goals"), convert = TRUE) %>%
  mutate(
    home_points = case_when(
      home_goals > away_goals ~ 3,
      home_goals == away_goals ~ 1,
      TRUE ~ 0
    ),
    away_points = case_when(
      away_goals > home_goals ~ 3,
      home_goals == away_goals ~ 1,
      TRUE ~ 0
    )
  )
```

Pivoting Data: The data is pivoted from wide to long format using pivot_longer, making it easier to calculate statistics for home and away teams. This transformation simplifies the processing and makes the data structure more manageable for calculations.

Separating Scores: The scores are separated into home and away goals using separate, allowing for individual goal calculations. This step is crucial for accurately determining match outcomes and calculating points.

Case When: case_when is used to assign points based on match results. This method is clear and concise, handling multiple conditions efficiently and ensuring that points are correctly allocated for wins, draws, and losses.

### Calculate total statistics for each team

```{r}
total_stats <- standings %>%
  pivot_longer(
    cols = c(home_team, away_team),
    names_to = "home_away",
    values_to = "team"
  ) %>%
  mutate(
    points = if_else(home_away == "home_team", home_points, away_points),
    goals_for = if_else(home_away == "home_team", home_goals, away_goals),
    goals_against = if_else(home_away == "home_team", away_goals, home_goals)
  ) %>%
  group_by(team) %>%
  summarize(
    points = sum(points),
    goals_for = sum(goals_for),
    goals_against = sum(goals_against),
    goal_diff = goals_for - goals_against
  )
```
Summarizing Statistics: Grouping by team and summarizing statistics helps in calculating the total points, goals for, goals against, and goal difference. This aggregation provides a comprehensive view of each team's performance throughout the season.

### Join with team names and create final standings

```{r}
final_standings <- total_stats %>%
  left_join(teams, by = c("team" = "abbr")) %>%
  arrange(desc(points), desc(goal_diff), desc(goals_for)) %>%
  mutate(rank = row_number()) %>%
  select(rank, team = name, points, goal_diff, goals_for)
```

### Display the result

```{r}
print(final_standings, n = 20)
```

## 1.2 Improve Visualization Using `gt` Functions

```{r}
league_table <- final_standings %>%
  gt() %>%
  tab_header(
    title = md("EPL 2019-2020 League Table"),
    subtitle = "Final Standings"
  ) %>%
  cols_label(
    rank = "Rank",
    team = "Team",
    points = "Points",
    goal_diff = "Goal Difference",
    goals_for = "Goals For"
  ) %>%
  tab_style(
    style = cell_text(
      align = "center",
      weight = "bold"
    ),
    locations = cells_column_labels(everything())
  ) %>%
  tab_style(
    style = list(
      cell_fill(color = "lightgrey"),
      cell_text(color = "black"),
      cell_borders(sides = "all", color = "black", weight = px(1))
    ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  ) %>%
  data_color(
    columns = vars(points),
    colors = scales::col_numeric(
      palette = c("white", "gold"),
      domain = c(min(final_standings$points), max(final_standings$points))
    )
  ) %>%
  data_color(
    columns = vars(goal_diff),
    colors = scales::col_numeric(
      palette = c("white", "lightgreen"),
      domain = c(min(final_standings$goal_diff), max(final_standings$goal_diff))
    )
  ) %>%
  data_color(
    columns = vars(goals_for),
    colors = scales::col_numeric(
      palette = c("white", "lightblue"),
      domain = c(min(final_standings$goals_for), max(final_standings$goals_for))
    )
  )
```

```{r}
league_table
```

### Rationale behind improvements made:

Bold Title and Borders: Adding a bold title using md and borders using cell_borders makes the table visually appealing and easy to read. Borders enhance the table's structure, while the bold title draws attention to the main heading.

Color Scales: Using data_color to apply color scales to points, goal differences, and goals scored highlights important data points. This visual enhancement helps readers quickly identify key statistics and differences between teams.

# Task 2: Finding and Visualizing a Real-World Dataset

## Import the dataset

The dataset contains a list of cars manufactured from 1945 to 2020. It includes details such as make, model, year, engine size, fuel type, transmission type, drivetrain, body style, number of doors, etc. The data is from [Kaggle](https://www.kaggle.com/datasets/jahaidulislam/car-specification-dataset-1945-2020) by Jahaidul Islam.
```{r}
cdf <- read_csv("dataset/car_data.csv")
tail(cdf)
nrow(cdf)
```
...

# Task 3: Visualizing Michelson’s Speed-of-Light Measurements

Albert A. Michelson (1882) published estimates of the speed of light obtained through a seminal experiment. The results (in km/s minus 299,000) are stored in R’s built-in morley data frame, which can be loaded into R’s global environment using the following line of code:

```{r}
data(morley)
morley <- as_tibble(morley)
morley
```

In the Expt column, each measurement is attributed to one of five different experiments. The first 20 measurements belong to experiment 1, the next 20 belong to experiment 2, and so forth. In this exercise, you will visualize these data using various types of graphics, including scatter plot, box plot, violin plot, and facet (one per experiment) plot.

For all the plots, customize the axis labels and add a plot title. Additionally, include a plot caption attributing the source as “R data set `morley`”.

## 3.1 Convert 'Expt' Column to Factor


```{r}
morley <- morley %>%
  mutate(Expt = as.factor(Expt))
```

## 3.2 Plot 1 – Create a Scatter Plot displaying Experiment Number vs. Measured Speeds

```{r}
morley %>%
  ggplot(aes(x = Speed, y = Expt)) +
  geom_point() +
  labs(title = "Scatter Plot of Measured Speeds vs Experiment Number",
       y = "Experiment Number",
       x = "Measured Speeds",
       caption = "Source: R data set `morley`")

```

## 3.3 Plot 2 – Create a Box Plot Measured Speeds with One Box Experiment

```{r}
morley %>%
  ggplot(aes(x = Speed, y = Expt)) +
  geom_boxplot() +
  labs(title = "Box Plot of Measured Speeds with One Box Experiment",
       y = "Experiment Number",
       x = "Measured Speeds",
       caption = "Source: R data set `morley`")

```

## 3.4 Plot 3 – Add a Violin Plot in Plot 2

```{r}
morley %>%
  ggplot(aes(x = Speed, y = Expt)) +
  geom_boxplot() +
  geom_violin(alpha = 0.5) +
  labs(title = "Violin Plot of Measured Speeds with One Box Experiment",
       y = "Experiment Number",
       x = "Measured Speeds",
       caption = "Source: R data set `morley`")

```

## 3.5 Plot 4 – Create a Faceted Plot Containing 5 Histograms

```{r}

ggplot(morley, aes(x = Speed)) +
  geom_histogram(binwidth = 20, fill = "grey", color = "black") +
  facet_wrap(~Expt, scales = "free_x") +
  labs(title = "Histogram of Measured Speeds by Experiment",
       caption = "R data set 'morley'") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
```

## 3.6 Discuss Your Choice Among the 4 Visualization Plots

Scatter Plot (Plot 1):

Purpose: Visualize the relationship between Experiment Number (Expt) and Measured Speeds (Speed).
Insights: Helps in understanding if there are any patterns or trends in the measured speeds across different experiments. Useful for initial exploration of data distribution and outliers.
Box Plot (Plot 2):

Purpose: Show the distribution of Measured Speeds (Speed) within each Experiment (Expt).
Insights: Provides a clear view of the central tendency, spread, and potential outliers in measured speeds for each experiment. Useful for comparing the variability between experiments.
Box Plot with Violin Plot Overlay (Plot 3):

Purpose: Enhance the Box Plot by adding a Violin Plot, which shows the density of the distribution.
Insights: Combines the insights from the Box Plot with additional information on the distribution shape and density. Useful for a more nuanced understanding of the data distribution within each experiment.
Faceted Histograms (Plot 4):

Purpose: Display the distribution of Measured Speeds (Speed) across all experiments, with each experiment shown separately.
Insights: Allows for easy comparison of the distribution of speeds across different experiments. Useful for identifying differences or similarities in speed measurements between experiments.

I would choose the violin plot among the 4 plots as it provides a scale of the amount of data distributed in a box plot, along with the usual information provided in a box plot, as the violin plot is a combination of a box plot and a density plot, which provides a better understanding of the data distribution.

